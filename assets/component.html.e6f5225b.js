import{_ as a,o as t,c as n,a as s}from"./app.a3f1b9ea.js";const e={},l=s(`<h1 id="translate" tabindex="-1"><a class="header-anchor" href="#translate" aria-hidden="true">#</a> <code>&lt;translate&gt;</code></h1><div class="warning"><b>Deprecated</b><p>The <code>&lt;translate&gt;</code> component and <code>v-translate</code> directive have been deprecated, use the functions instead.</p><p>Since Vue 3, extracting messages from within components is awkward and error-prone as well as cause issues with server-side rendering.</p> To make the transition easier, they will keep working until a future major release. </div><h2 id="usage" tabindex="-1"><a class="header-anchor" href="#usage" aria-hidden="true">#</a> Usage</h2><div class="language-vue ext-vue line-numbers-mode"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>translate</span><span class="token punctuation">&gt;</span></span>Hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>translate</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>&lt;translate&gt;</code> renders a <code>&lt;span&gt;</code> by default, use <code>tag</code> to override.</p><div class="language-vue ext-vue line-numbers-mode"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>translate</span> <span class="token attr-name">tag</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>h1<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>translate</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="parameters" tabindex="-1"><a class="header-anchor" href="#parameters" aria-hidden="true">#</a> Parameters</h3><p>If the parameter should change dynamically, use the <code>:translate-params</code> prop (or use the <code>v-translate</code> directive).</p><div class="language-vue ext-vue line-numbers-mode"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>translate</span> <span class="token attr-name">:translate-params</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{ name: <span class="token punctuation">&#39;</span>Paul<span class="token punctuation">&#39;</span> }<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Hello %{ name }!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>translate</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="pluralization" tabindex="-1"><a class="header-anchor" href="#pluralization" aria-hidden="true">#</a> Pluralization</h3><div class="language-vue ext-vue line-numbers-mode"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>translate</span>
  <span class="token attr-name">:translate-params</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{ amount: 2 }<span class="token punctuation">&quot;</span></span>
  <span class="token attr-name">:translate-n</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>2<span class="token punctuation">&quot;</span></span>
  <span class="token attr-name">translate-plural</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>%{ amount } cars<span class="token punctuation">&quot;</span></span>
<span class="token punctuation">&gt;</span></span>
  %{ amount } car
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>translate</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="props" tabindex="-1"><a class="header-anchor" href="#props" aria-hidden="true">#</a> Props</h2><table><thead><tr><th>Prop</th><th>Description</th><th>Type</th><th>Default</th></tr></thead><tbody><tr><td>tag</td><td>HTML tag that contains the message</td><td>string</td><td>span</td></tr><tr><td>translate-n</td><td>Determines what plural form to apply to the message</td><td>number</td><td>null</td></tr><tr><td>translate-plural</td><td>Pluralized message</td><td>string</td><td>null</td></tr><tr><td>translate-context</td><td>Gettext translation context</td><td>string</td><td>null</td></tr><tr><td>translate-params</td><td>Parameters to interpolate messages</td><td>Object</td><td>null</td></tr><tr><td>translate-comment</td><td>Comment for the message id</td><td>string</td><td>null</td></tr></tbody></table>`,13),p=[l];function o(r,c){return t(),n("div",null,p)}var u=a(e,[["render",o],["__file","component.html.vue"]]);export{u as default};
