import{_ as e,o,c as p,d as s,b as t,a as l,e as n,r}from"./app.d13c1c92.js";const c={},i=l(`<h1 id="message-extraction" tabindex="-1"><a class="header-anchor" href="#message-extraction" aria-hidden="true">#</a> Message extraction</h1><p>To extract all the messages that you want translated from your application code, a bit of setup is required.</p><h2 id="scripts" tabindex="-1"><a class="header-anchor" href="#scripts" aria-hidden="true">#</a> Scripts</h2><p>First, add scripts to your <code>package.json</code>:</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  ...
  <span class="token property">&quot;gettext:extract&quot;</span><span class="token operator">:</span> <span class="token string">&quot;vue-gettext-extract&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;gettext:compile&quot;</span><span class="token operator">:</span> <span class="token string">&quot;vue-gettext-compile&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>npm run gettext:extract</code> extracts messages from your code and creates <code>.po</code> files.</p><p><code>npm run gettext:compile</code> compiles the translated messages from the <code>.po</code> files to a <code>.json</code> to be used in your application.</p><p>Using these scripts is <em>theoretically</em> optional if you have other means of extraction or may even want to write message files yourself.</p><h2 id="configuration" tabindex="-1"><a class="header-anchor" href="#configuration" aria-hidden="true">#</a> Configuration</h2><p>Before running the scripts, create a file <code>gettext.config.js</code> in your application root. This is a configuration <em>only</em> for the scripts above. A minimal configuration may look like this:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">locales</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;en&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;de&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Here are all the available configuration options and their defaults:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">input</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&quot;./src&quot;</span><span class="token punctuation">,</span> <span class="token comment">// only files in this directory are considered for extraction</span>
    <span class="token literal-property property">include</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;**/*.js&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;**/*.ts&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;**/*.vue&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// glob patterns to select files for extraction</span>
    <span class="token literal-property property">exclude</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// glob patterns to exclude files from extraction</span>
    <span class="token literal-property property">jsExtractorOpts</span><span class="token operator">:</span><span class="token punctuation">[</span> <span class="token comment">// custom extractor keyword. default empty.</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">keyword</span><span class="token operator">:</span> <span class="token string">&quot;__&quot;</span><span class="token punctuation">,</span> <span class="token comment">// only extractor default keyword such as $gettext,use keyword to custom</span>
        <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token comment">// see https://github.com/lukasgeiter/gettext-extractor</span>
          <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">replaceNewLines</span><span class="token operator">:</span> <span class="token string">&quot;\\n&quot;</span><span class="token punctuation">,</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span>
          <span class="token literal-property property">arguments</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">keyword</span><span class="token operator">:</span> <span class="token string">&quot;_n&quot;</span><span class="token punctuation">,</span> <span class="token comment">// $ngettext</span>
        <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">replaceNewLines</span><span class="token operator">:</span> <span class="token string">&quot;\\n&quot;</span><span class="token punctuation">,</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span>
          <span class="token literal-property property">arguments</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
            <span class="token literal-property property">textPlural</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
	<span class="token literal-property property">compileTemplate</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// do not compile &lt;template&gt; tag when its lang is not html</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&quot;./src/language&quot;</span><span class="token punctuation">,</span> <span class="token comment">// output path of all created files</span>
    <span class="token literal-property property">potPath</span><span class="token operator">:</span> <span class="token string">&quot;./messages.pot&quot;</span><span class="token punctuation">,</span> <span class="token comment">// relative to output.path, so by default &quot;./src/language/messages.pot&quot;</span>
    <span class="token literal-property property">jsonPath</span><span class="token operator">:</span> <span class="token string">&quot;./translations.json&quot;</span><span class="token punctuation">,</span> <span class="token comment">// relative to output.path, so by default &quot;./src/language/translations.json&quot;</span>
    <span class="token literal-property property">locales</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;en&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token literal-property property">flat</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// don&#39;t create subdirectories for locales</span>
    <span class="token literal-property property">linguas</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// create a LINGUAS file</span>
    <span class="token literal-property property">splitJson</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// create separate json files for each locale. If used, jsonPath must end with a directory, not a file</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="gotchas" tabindex="-1"><a class="header-anchor" href="#gotchas" aria-hidden="true">#</a> Gotchas</h2>`,14),u=n("When first extract, it will call "),d=s("code",null,"msginit",-1),k=n(" to create a "),m=s("code",null,".po",-1),v=n(" file, this command will set the "),h=s("code",null,"Plural-Forms",-1),b=n(" header, if the locale is in "),g={href:"https://github.com/dd32/gettext/blob/master/gettext-tools/src/plural-table.c#L27",target:"_blank",rel:"noopener noreferrer"},y=n("the embedded table"),f=n(" of msginit."),_=n("Otherwise, as an experimental feature, you can instruct msginit to use the information from Unicode CLDR, by setting the "),x=s("code",null,"GETTEXTCLDRDIR",-1),q=n(" environment variable. The program will look for a file named "),j=s("code",null,"common/supplemental/plurals.xml",-1),w=n(" under that directory. You can get the CLDR data from "),L={href:"http://cldr.unicode.org/",target:"_blank",rel:"noopener noreferrer"},T=n("http://cldr.unicode.org/"),N=n(". Or only download the "),E={href:"https://raw.githubusercontent.com/unicode-org/cldr/main/common/supplemental/plurals.xml",target:"_blank",rel:"noopener noreferrer"},C=n("plurals.xml"),I=n(" file.");function P(B,D){const a=r("ExternalLinkIcon");return o(),p("div",null,[i,s("p",null,[u,d,k,m,v,h,b,s("a",g,[y,t(a)]),f]),s("p",null,[_,x,q,j,w,s("a",L,[T,t(a)]),N,s("a",E,[C,t(a)]),I])])}var V=e(c,[["render",P],["__file","extraction.html.vue"]]);export{V as default};
